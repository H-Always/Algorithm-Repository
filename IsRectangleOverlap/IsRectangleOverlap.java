/**
 * @ClassName: IsRectangleOverlap
 * @Description: 矩形重叠
 * @Author: 余霜
 * @Date: 2020/03/18 18:29
 * @Version: V1.0
 *
 * 矩形以列表 [x1, y1, x2, y2] 的形式表示，其中 (x1, y1) 为左下角的坐标，(x2, y2) 是右上角的坐标。
 *
 * 如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。
 *
 * 给出两个矩形，判断它们是否重叠并返回结果。
 *
 *
 *
 * 示例 1：
 *
 * 输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]
 * 输出：true
 * 示例 2：
 *
 * 输入：rec1 = [0,0,1,1], rec2 = [1,0,2,1]
 * 输出：false
 *
 *
 * 提示：
 *
 * 两个矩形 rec1 和 rec2 都以含有四个整数的列表的形式给出。
 * 矩形中的所有坐标都处于 -10^9 和 10^9 之间。
 * x 轴默认指向右，y 轴默认指向上。
 * 你可以仅考虑矩形是正放的情况。
 **/

//思路...这题真的没啥思路.. 我连测试都懒得写...如果有人连这题都写不出来的话确实有点过分
// 小学数学题，设第一个矩形(x1,y1,x2,y2) 第二个矩形(m1,n1,m2,n2)
// 当x1>=m2 , y1>=n2 , x2<=m1 , y2<=n1 时区域面积不重叠
// 姑且解释一下，x1>=m2是第一个矩形的下边大于第二个矩形的上边，y1>=n2是第一个矩形第一个矩形的左边大于第二个矩形的右边
// 这样就把不重合的条件判断出来了，当上述条件有一个成立(true)，就说明不存在,要返回false，就取一下反返回
// 我真的不认为这题有人不会- -!...
public class IsRectangleOverlap {
    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {

        return !(rec1[0]>= rec2[2] || rec1[1] >= rec2[3] || rec1[2] <= rec2[0] || rec1[3] <=rec2[1]);

    }
}
