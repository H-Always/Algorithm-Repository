/**
 * @ClassName: MaxProfit
 * @Description: 买股票的最佳时机
 * @Author: 余霜
 * @date: 2020/3/9/9:47
 * @Version: 1.0
 *
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 *
 * 如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。
 *
 * 注意你不能在买入股票前卖出股票。
 *
 * 示例 1:
 *
 * 输入: [7,1,5,3,6,4]
 * 输出: 5
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
 *      注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
 * 示例 2:
 *
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 */
public class MaxProfit {
    public int maxProfit(int[] prices){

        //这题是一个典型的双指针，首先明确一点，只有下一天的价格比前面低才可以获得利润，否则的话就要往下推一天
        //如果下一天的获得了利润，证明当前一天价格较低，j继续往下遍历价格，当遍历到比当前的价格还要低的时候就跳转到当前天
        //这样就满足了遍历一遍就把所有可能获利的结果都判断出来了
        int i = 0,j = 0,max = 0;
        while (j<prices.length){
            //当前日期的价格要比下一天高，没有利润可以获取
            if (prices[i]>prices[j]){
                i=j;
                j++;
                continue;
            }

            //判断是否是最大利润
            max = Math.max(max,prices[j]-prices[i]);
            j++;
        }

        return max;
    }
}

